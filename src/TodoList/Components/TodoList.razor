@page "/todolist"
@using Microsoft.EntityFrameworkCore
@using global::TodoList.Data
@using global::TodoList.Models
@using global::TodoList.Sevices;
@inject DataBaseService DataBaseService;
@rendermode InteractiveServer

<h3>やることリスト</h3>

<div class="task-board">
    <div class="task-column">
        <h3>未着手 (@m_TodoList.Items.Count(todo => todo.Status == TodoStatus.Incomplete))</h3>
        <ul class="task-list">
            @foreach (var todo in m_TodoList.Items.Where(todo => todo.Status == TodoStatus.Incomplete))
            {
                <li>
                    <TodoItemComponent TodoItem="todo" OnRemove="RemoveItem" OnEdit="EditItem" />
                </li>
            }
        </ul>
    </div>
    <div class="task-column">
        <h3>作業中 (@m_TodoList.Items.Count(todo => todo.Status == TodoStatus.Doing))</h3>
        <ul class="task-list">
            @foreach (var todo in m_TodoList.Items.Where(todo => todo.Status == TodoStatus.Doing))
            {
                <li>
                    <TodoItemComponent TodoItem="todo" OnRemove="RemoveItem" OnEdit="EditItem" />
                </li>
            }
        </ul>
    </div>
    <div class="task-column">
        <h3>完了 (@m_TodoList.Items.Count(todo => todo.Status == TodoStatus.Complete))</h3>
        <ul class="task-list">
            @foreach (var todo in m_TodoList.Items.Where(todo => todo.Status == TodoStatus.Complete))
            {
                <li>
                    <TodoItemComponent TodoItem="todo" OnRemove="RemoveItem" OnEdit="EditItem" />
                </li>
            }
        </ul>
    </div>
</div>

<div class="add-task">
    <input @bind="newTodo" />
    <button class="simple-button" @onclick="AddTodo">追加</button>
</div>

@code {
    private TodoItemCollection m_TodoList;
    string newTodo = "";

    private async void AddTodo()
    {
        if (!string.IsNullOrWhiteSpace(newTodo))
        {
            var todoItem = m_TodoList.Add(newTodo);
            await DataBaseService.CreateTodoItemAsync(todoItem);
        }
    }

    private async void RemoveItem(TodoItem item)
    {
        await DataBaseService.DeleteTodoItemAsync(item.Id);
        m_TodoList.Remove(item);
    }

    private async void EditItem(TodoItem item)
    {
        await DataBaseService.UpdateTodoItemAsync(item);
    }

    protected override async Task OnInitializedAsync()
    {
        m_TodoList = new TodoItemCollection();
        var todoItems = await DataBaseService.GetTodoItemsAsync();
        m_TodoList.Add(todoItems);
    }
}


